<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API on Hilbish</title><link>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/</link><description>Recent content in API on Hilbish</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Module bait</title><link>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/bait/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/bait/</guid><description>Introduction Bait is the event emitter for Hilbish. Much like Node.js and its events system, many actions in Hilbish emit events. Unlike Node.js, Hilbish events are global. So make sure to pick a unique name!
Usage of the Bait module consists of userstanding event-driven architecture, but it&amp;rsquo;s pretty simple: If you want to act on a certain event, you can catch it. You can act on events via callback functions.</description></item><item><title>Module commander</title><link>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/commander/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/commander/</guid><description>Introduction Commander is a library for writing custom commands in Lua. In order to make it easier to write commands for Hilbish, not require separate scripts and to be able to use in a config, the Commander library exists. This is like a very simple wrapper that works with Hilbish for writing commands. Example:
local commander = require &amp;#39;commander&amp;#39; commander.register(&amp;#39;hello&amp;#39;, function(args, sinks) sinks.out:writeln &amp;#39;Hello world!&amp;#39; end) In this example, a command with the name of hello is created that will print Hello world!</description></item><item><title>Module fs</title><link>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/fs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/fs/</guid><description>Introduction The fs module provides easy and simple access to filesystem functions and other things, and acts an addition to the Lua standard library&amp;rsquo;s I/O and filesystem functions.
Functions fs.abs(path) -&amp;gt; string Gives an absolute version of path.
Parameters This function has no parameters.
fs.basename(path) -&amp;gt; string Gives the basename of path. For the rules, see Go&amp;rsquo;s filepath.Base
Parameters This function has no parameters.
fs.cd(dir) Changes directory to dir</description></item><item><title>Module terminal</title><link>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/terminal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/versions/doc-improvements/docs/api/terminal/</guid><description>Introduction The terminal library is a simple and lower level library for certain terminal interactions.
Functions terminal.restoreState() Restores the last saved state of the terminal
Parameters This function has no parameters.
terminal.saveState() Saves the current state of the terminal
Parameters This function has no parameters.
terminal.setRaw() Puts the terminal in raw mode
Parameters This function has no parameters.
terminal.size() Gets the dimensions of the terminal. Returns a table with width and height Note: this is not the size in relation to the dimensions of the display</description></item></channel></rss>