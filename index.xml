<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hilbish</title><link>https://rosettea.github.io/Hilbish/</link><description>Recent content on Hilbish</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://rosettea.github.io/Hilbish/index.xml" rel="self" type="application/rss+xml"/><item><title>Frequently Asked Questions</title><link>https://rosettea.github.io/Hilbish/docs/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/faq/</guid><description>Is Hilbish POSIX compliant? No, it is not. POSIX compliance is a non-goal. Perhaps in the future, someone would be able to write a native plugin to support shell scripting (which would be against it&amp;rsquo;s main goal, but &amp;hellip;.)
Windows Support? It compiles for Windows (CI ensures it does), but otherwise it is not directly supported. If you&amp;rsquo;d like to improve this situation, checkout the discussion .
Where is the API documentation?</description></item><item><title>Getting Started</title><link>https://rosettea.github.io/Hilbish/docs/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/getting-started/</guid><description>To start Hilbish, open a terminal. If Hilbish has been installed and is not the default shell, you can simply run hilbish to start it. This will launch a normal interactive session. To exit, you can either run the exit command or hit Ctrl+D.
Setting as Default Login shell There are a few ways to make Hilbish your default shell. A simple way is to make it your user/login shell.</description></item><item><title/><link>https://rosettea.github.io/Hilbish/docs/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/</guid><description>hello!</description></item><item><title>Install</title><link>https://rosettea.github.io/Hilbish/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/install/</guid><description>Official Binaries The best way to get Hilbish is to get a build directly from GitHub. At any time, there are 2 versions of Hilbish recommended for download: the latest stable release, and development builds from the master branch.
You can download both at any time, but note that the development builds may have breaking changes.
For the latest stable release, check here: https://github.com/Rosettea/Hilbish/releases/latest For a development build: https://nightly.link/Rosettea/Hilbish/workflows/build/master Package Repositories Fedora (COPR) An official COPR is offered to install Hilbish easily on Fedora.</description></item><item><title>Interface hilbish.aliases</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.aliases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.aliases/</guid><description>Introduction The alias interface deals with all command aliases in Hilbish.
Functions add(alias, cmd) This is an alias (ha) for the hilbish.alias function.
delete(name) Removes an alias.
list() Get a table of all aliases.
resolve(alias) Tries to resolve an alias to its command.</description></item><item><title>Interface hilbish.completions</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.completions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.completions/</guid><description>Introduction The completions interface deals with tab completions.
Functions call(name, query, ctx, fields) Calls a completer function. This is mainly used to call a command completer, which will have a name in the form of command.name, example: command.git
handler(line, pos) The handler function is the callback for tab completion in Hilbish. You can check the completions doc for more info.
bins(query, ctx, fields) Returns binary/executale completion candidates based on the provided query.</description></item><item><title>Interface hilbish.editor</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.editor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.editor/</guid><description>Introduction The hilbish.editor interface provides functions to directly interact with the line editor in use.
Functions getLine() Returns the current input line.
getVimRegister(register) Returns the text that is at the register.
insert(text) Inserts text into the line.
setVimRegister(register, text) Sets the vim register at register to hold the passed text.</description></item><item><title>Interface hilbish.history</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.history/</guid><description>Introduction The history interface deals with command history. This includes the ability to override functions to change the main method of saving history.
Functions add(cmd) Adds a command to the history.
clear() Deletes all commands from the history.
get(idx) Retrieves a command from the history based on the idx.
size() Returns the amount of commands in the history.</description></item><item><title>Interface hilbish.jobs</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.jobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.jobs/</guid><description>Introduction Manage interactive jobs in Hilbish via Lua.
Jobs are the name of background tasks/commands. A job can be started via interactive usage or with the functions defined below for use in external runners.
Object properties cmd: The user entered command string for the job. running: Whether the job is running or not. id: The ID of the job in the job table pid: The Process ID exitCode: The last exit code of the job.</description></item><item><title>Interface hilbish.os</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.os/</guid><description> Introduction The os interface provides simple text information properties about the current OS on the systen. This mainly includes the name and version.
Interface fields family: Family name of the current OS name: Pretty name of the current OS version: Version of the current OS</description></item><item><title>Interface hilbish.runner</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.runner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.runner/</guid><description>Introduction The runner interface contains functions that allow the user to change how Hilbish interprets interactive input. Users can add and change the default runner for interactive input to any language or script of their choosing. A good example is using it to write command in Fennel.
Functions setMode(cb) This is the same as the hilbish.runnerMode function. It takes a callback, which will be used to execute all interactive input.</description></item><item><title>Interface hilbish.timers</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.timers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.timers/</guid><description>Introduction The timers interface si one to easily set timeouts and intervals to run functions after a certain time or repeatedly without using odd tricks.
Object properties type: What type of timer it is running: If the timer is running duration: The duration in milliseconds that the timer will run Functions start() Starts a timer.
stop() Stops a timer.
create(type, time, callback) Creates a timer that runs based on the specified time in milliseconds.</description></item><item><title>Interface hilbish.userDir</title><link>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.userdir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/hilbish/hilbish.userdir/</guid><description> Introduction This interface just contains properties to know about certain user directories. It is equivalent to XDG on Linux and gets the user&amp;rsquo;s preferred directories for configs and data.
Interface fields config: The user&amp;rsquo;s config directory data: The user&amp;rsquo;s directory for program data</description></item><item><title>Module bait</title><link>https://rosettea.github.io/Hilbish/docs/api/bait/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/bait/</guid><description>Introduction Bait is the event emitter for Hilbish. Why name it bait? Why not. It throws hooks that you can catch. This is what you will use if you want to listen in on hooks to know when certain things have happened, like when you&amp;rsquo;ve changed directory, a command has failed, etc. To find all available hooks thrown by Hilbish, see doc hooks.
Functions catch(name, cb) Catches a hook with name.</description></item><item><title>Module commander</title><link>https://rosettea.github.io/Hilbish/docs/api/commander/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/commander/</guid><description>Introduction Commander is a library for writing custom commands in Lua.
Functions deregister(name) Deregisters any command registered with name
register(name, cb) Register a command with name that runs cb when ran</description></item><item><title>Module fs</title><link>https://rosettea.github.io/Hilbish/docs/api/fs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/fs/</guid><description>Introduction The fs module provides easy and simple access to filesystem functions and other things, and acts an addition to the Lua standard library&amp;rsquo;s I/O and filesystem functions.
Functions abs(path) Gives an absolute version of path.
basename(path) Gives the basename of path. For the rules, see Go&amp;rsquo;s filepath.Base
cd(dir) Changes directory to dir
dir(path) Returns the directory part of path. For the rules, see Go&amp;rsquo;s filepath.Dir
glob(pattern) Glob all files and directories that match the pattern.</description></item><item><title>Module terminal</title><link>https://rosettea.github.io/Hilbish/docs/api/terminal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/api/terminal/</guid><description>Introduction The terminal library is a simple and lower level library for certain terminal interactions.
Functions restoreState() Restores the last saved state of the terminal
saveState() Saves the current state of the terminal
setRaw() Puts the terminal in raw mode
size() Gets the dimensions of the terminal. Returns a table with width and height Note: this is not the size in relation to the dimensions of the display</description></item><item><title>Runner Mode</title><link>https://rosettea.github.io/Hilbish/docs/features/runner-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rosettea.github.io/Hilbish/docs/features/runner-mode/</guid><description>Hilbish allows you to change how interactive text can be interpreted. This is mainly due to the fact that the default method Hilbish uses is that it runs Lua first and then falls back to shell script.
In some cases, someone might want to switch to just shell script to avoid it while interactive but still have a Lua config, or go full Lua to use Hilbish as a REPL. This also allows users to add alternative languages, instead of either like Fennel.</description></item></channel></rss>